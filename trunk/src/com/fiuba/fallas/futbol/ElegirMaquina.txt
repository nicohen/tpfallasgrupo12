#created on: 11/04/2009
package com.fiuba.fallas.futbol;

#list any import classes here.
import com.fiuba.fallas.futbol.Jugador
import com.fiuba.fallas.futbol.Main
import com.fiuba.fallas.futbol.estadoPosible

/** R01
* Al tener menos de 7 en el atributo costo, descarto la posibilidad de que sea arquero
* Si el costo es menor a 10, descarto la posibilidad de economizar costos
*/
rule "No economizo costos seguro"
	salience 200
	when
		$jugador : Jugador ($costo : costo < 10, $id : id)
		$pp : estadoPosible( idJugador == $id , estado=="Arquero")
	then 
		System.out.println($jugador.getNombre() +" no economizo costos materiales seguro");
		retract($pp);
		update($jugador);		
end

/** R02 
* Al tener menos de 7 en el atributo CostoMOs, descarto la posibilidad de que sea arquero
* Al tener menos de 7 en el atributo costoMO, descarto la posibilidad de economizar mano de obra
*/
rule "No Defensor seguro"
	salience 200
	when
		$jugador : Jugador ($costo : CostoMO < 7, $id : id)
		$pp : estadoPosible( idJugador == $id , estado=="Defensor")
	then 
		System.out.println($jugador.getNombre() +" no economizo mano de obra seguro");
		retract($pp);
		update($jugador);		
end

/** R03
* Al tener menos de 7 en el atributo amortizacion, descarto la posibilidad de que sea volante
* Al tener menos de 7 en el atributo amortizacion, descarto la posibilidad de comprar nueva maquinaria
*/
rule "No Volante seguro"
	salience 200
	when
		$jugador : Jugador ($costo : amortizacion < 7, $id : id)
		$pp : estadoPosible( idJugador == $id , estado=="Volante")
	then 
		System.out.println($jugador.getNombre() +" no compro maquinaria");
		retract($pp);		
		update($jugador);
end

/** R04
* Al tener menos de 7 en el atributo definicion, descarto la posibilidad de que sea volante
* Al tener menos de 7 en el atributo eficacia, descarto la posibilidad de realizar mantenimiento
*/
rule "No Delantero seguro"
	salience 200
	when
		$jugador : Jugador ($costo : definicion < 7, $id : id)
		$pp : estadoPosible( idJugador == $id , estado=="Delantero")
	then 
		System.out.println($jugador.getNombre() +" no se realiza mantenimiento");
		retract($pp);		
		update($jugador);
end

/** R05
* Si no entra en ninguna categoría le asigno una especial
*/
rule "No entra en ninguna"
	salience 20
	no-loop
	when
		$jugador : Jugador ($id : id)
		not (estadoPosible( idJugador == $id))
	then 
		System.err.println($jugador.getNombre() +" no califica para ninguna categoria");
end

/****   5 REGLAS   *****/
/****   5 REGLAS   *****/
/****   5 REGLAS   *****/

/** R06
* Si tiene una sola categoría la pongo como definitiva
*/
rule "Una sola categoría"
	salience 30
	no-loop
	when	
		$pp : estadoPosible( $idj : idJugador , $pos : estado )
		$jugador : Jugador (id == $idj, $nombre : nombre);
		not (estadoPosible( idJugador == $idj, estado != $pos))
	then 
		System.out.println($nombre +" es necesariamente " + $pp.getestado());
		$jugador.setestado($pp.getestado());
		update($jugador);
end

/** R07
* Si no es nada reasigno -> delantero?
* Si no es nada reasigno -> Excelente estado
*/
rule "No es nada Reasigno - posible Excelente estado"
	salience 15
	no-loop
	when	
		$jugador : Jugador ($idj : id, capacitacion>4 && velocidad>4,$nombre : nombre);
		not (estadoPosible( idJugador == $idj))
	then 
		System.out.println($nombre +" reasignado a Excelente estado");
		$jugador.setestado("ExcelenteEstado");
end

/** R08
* Si no es nada reasigno -> volante?
* Si no es nada reasigno -> Estado Medio?
*/
rule "No es nada Reasigno - posible Estado Medio"
	salience 15
	no-loop
	when	
		$jugador : Jugador ($idj : id, resistencia>3 && CostoMO>3 && velocidad>3,$nombre : nombre);
		not (estadoPosible( idJugador == $idj))
	then 
		System.out.println($nombre +" reasignado a estado medio");
		$jugador.setestado("EstadoMedio");
end

/** R09
* Si no es nada reasigno -> defensor?
* Si no es nada reasigno -> Mal Estado?
*/
rule "No es nada Reasigno - posible defensor"
	salience 15
	no-loop
	when	
		$jugador : Jugador ($idj : id, resistencia>3 && CostoMO>3 && capacitacion>4,$nombre : nombre);
		not (estadoPosible( idJugador == $idj))
	then 
		System.out.println($nombre +" reasignado a Mal Estado");
		$jugador.setestado("MalEstado");
end

/** R10
* Si no es nada reasigno -> arquero?
* Si no es nada reasigno -> Muy mal estado?
*/
rule "No es nada Reasigno - posible MMEstado"
	salience 15
	no-loop
	when	
		$jugador : Jugador ($idj : id, resistencia>3 && costo>4,$nombre : nombre);
		not (estadoPosible( idJugador == $idj))
	then 
		System.out.println($nombre +" reasignado a Muy mal estado");
		$jugador.setestado("MMEstado");
end

/***   DESAMBIGUACION   ***/
/** R11
* Si es apto para las 4 estadoes?
*/
rule "Super maquina ->Plus Maquinaria"
	salience 35
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, definicion >9);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="MMEstado")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="MalEstado")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="EstadoMedio")
		$pp4: estadoPosible ( idJugador ==$idj , estado =="ExcelenteEstado")
	then 
		System.out.println($nombre +" Super Maquina -> Como Excelente Estado!");
		$jugador.setestado("Excelente estado");
		retract($pp1);
		retract($pp2);
		retract($pp3);
end

/** R12
* Si es apto para las 4 estadoes?
*/
rule "Media maquina ->Plus maquina"
	salience 35
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, amortizacion >9);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="MMEstado")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="MalEstado")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="EstadoMedio")
		$pp4: estadoPosible ( idJugador ==$idj , estado =="ExcelenteEstado")
	then 
		System.out.println($nombre +" Super Maquina -> Como Estado Medio!");
		$jugador.setestado("EstadoMedio");
		retract($pp1);
		retract($pp2);
		retract($pp4);
end

/** R13
* Si es apto para las 4 estadoes?
*/
rule "Mal estado ->Plus Maquina"
	salience 35
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, CostoMO >9);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="MMEstado")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="MalEstado")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="EstadoMedio")
		$pp4: estadoPosible ( idJugador ==$idj , estado =="ExcelenteEstado")
	then 
		System.out.println($nombre +" Super Maquina -> Como Mal Estado");
		$jugador.setestado("MalEstado");
		retract($pp1);
		retract($pp3);
		retract($pp4);
end

/** R14
* Si es apto para las 4 estadoes?
*/
rule "Pesima Maquina ->Plus maquina"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, costo >9);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="MMEstado")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="MalEstado")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="EstadoMedio")
		$pp4: estadoPosible ( idJugador ==$idj , estado =="ExcelenteEstado")
	then 
		System.out.println($nombre +" Super Maquina -> Como Muy mal estado!");
		$jugador.setestado("MMEstado");
		retract($pp2);
		retract($pp3);
		retract($pp4);
end

/** R15
* Si es apto para 3 estadoes (Arq, Def, Vol)
*/
rule "MME, ME, ME"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, costo > CostoMO,costo > amortizacion);
		$pp2: estadoPosible ( idJugador ==$idj , estado =="MalEstado")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="EstadoMedio")
		$pp4: estadoPosible ( idJugador ==$idj , estado =="ExcelenteEstado")
	then 
		System.out.println($nombre +"  tiene 3 posibles -> Como Muy mal estado");
		$jugador.setestado("MMEstado");
		retract($pp2);
		retract($pp3);
end

/** R16
* Si es apto para 3 estadoes (Arq, Def, Vol)
*/
rule "Arq, DEF, vol"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, costo <= CostoMO,costo >= amortizacion);
		$pp2: estadoPosible ( idJugador ==$idj , estado =="MalEstado")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="EstadoMedio")
		$pp4: estadoPosible ( idJugador ==$idj , estado =="ExcelenteEstado")
	then 
		System.out.println($nombre +" tiene 3 posibles -> Como EstadoMedio");
		$jugador.setestado("EstadoMedio");
		retract($pp1);
		retract($pp3);
end

/** R17
* Si es apto para 3 estadoes (Arq, Def, Vol)
*/
rule "Arq, Def, VOL"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, costo <= CostoMO,costo >= amortizacion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Defensor")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="Volante")
	then 
		System.out.println($nombre +" tiene 3 posibles -> Como volante!");
		$jugador.setestado("Volante");
		retract($pp1);
		retract($pp2);
end

/** R18
* Si es apto para 3 estadoes (Arq, Def, Del)
*/
rule "ARQ, Def, Del"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, costo >= CostoMO,CostoMO >= definicion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Defensor")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 3 posibles -> Como Arquero!");
		$jugador.setestado("Arquero");
		retract($pp2);
		retract($pp3);
end


/** R19
* Si es apto para 3 estadoes (Arq, Def, Del)
*/
rule "Arq, DEF, Del"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, costo <= CostoMO,CostoMO >= definicion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Defensor")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 3 posibles -> Como Defensor!");
		$jugador.setestado("Defensor");
		retract($pp1);
		retract($pp3);
end


/** R20
* Si es apto para 3 estadoes (Arq, Def, Del)
*/
rule "Arq, Def, DEL"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, costo <= CostoMO,CostoMO <= definicion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Defensor")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 3 posibles -> Como Delantero!");
		$jugador.setestado("Delantero");
		retract($pp1);
		retract($pp2);
end

/** R21
* Si es apto para 3 estadoes (Arq, Vol, Del)
*/
rule "ARQ, Vol, Del"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, costo >= amortizacion,amortizacion >= definicion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Volante")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 3 posibles -> Como Arquero!");
		$jugador.setestado("Arquero");
		retract($pp2);
		retract($pp3);
end


/** R22
* Si es apto para 3 estadoes (Arq, Vol, Del)
*/
rule "Arq, VOL, Del"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, costo <= amortizacion,amortizacion >= definicion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Volante")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 3 posibles -> Como Volante!");
		$jugador.setestado("Volante");
		retract($pp1);
		retract($pp3);
end

/** R23
* Si es apto para 3 estadoes (Arq, Vol, Del)
*/
rule "Arq, Vol, DEL"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, costo <= amortizacion,amortizacion <= definicion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Volante")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 3 posibles -> Como Delantero!");
		$jugador.setestado("Delantero");
		retract($pp1);
		retract($pp2);
end

/** R24
* Si es apto para 3 estadoes (Def, Vol, Del)
*/
rule "DEF, Vol, Del"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, CostoMO >= amortizacion,amortizacion >= definicion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Defensor")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Volante")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 3 posibles -> Como Defensor!");
		$jugador.setestado("Defensor");
		retract($pp2);
		retract($pp3);
end

/** R25
* Si es apto para 3 estadoes (Def, Vol, Del)
*/
rule "Def, VOL, Del"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, CostoMO <= amortizacion,amortizacion >= definicion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Defensor")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Volante")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 3 posibles -> Como Volante!");
		$jugador.setestado("Volante");
		retract($pp1);
		retract($pp3);
end

/** R26
* Si es apto para 3 estadoes (Def, Vol, Del)
*/
rule "Def, Vol, DEL"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, CostoMO <= amortizacion,amortizacion <= definicion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Defensor")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Volante")
		$pp3: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 3 posibles -> Como Delantero!");
		$jugador.setestado("Delantero");
		retract($pp1);
		retract($pp2);
end

/** R27
* Si es apto para 2 estadoes (Arq, Def)
*/
rule "ARQ, Def"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  CostoMO< costo);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Defensor")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Arquero!");
		$jugador.setestado("Arquero");
		retract($pp2);
end

/** R28
* Si es apto para 2 estadoes (Arq, Def)
*/
rule "Arq, DEF"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  CostoMO > costo);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Defensor")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Defensor!");
		$jugador.setestado("Defensor");
		retract($pp1);
end

/** R29
* Si es apto para 2 estadoes (Arq, Vol)
*/
rule "ARQ, Vol"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  amortizacion < costo);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Volante")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Arquero!");
		$jugador.setestado("Arquero");
		retract($pp2);
end

/** R30
* Si es apto para 2 estadoes (Arq, Vol)
*/
rule "Arq, VOL"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  amortizacion> costo);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Volante")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Volante!");
		$jugador.setestado("Volante");
		retract($pp1);
end

/** R31
* Si es apto para 2 estadoes (Arq, Del)
*/
rule "ARQ, Del"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  definicion < costo);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Arquero!");
		$jugador.setestado("Arquero");
		retract($pp2);
end

/** R32
* Si es apto para 2 estadoes (Arq, Del)
*/
rule "Arq, DEL"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  definicion > costo);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Delantero!");
		$jugador.setestado("Delantero");
		retract($pp1);
end

/** R33
* Si es apto para 2 estadoes (Def, Vol)
*/
rule "DEF, Vol"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  CostoMO > amortizacion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Defensor")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Volante")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Defensor!");
		$jugador.setestado("Defensor");
		retract($pp2);
end


/** R34
* Si es apto para 2 estadoes (Def, Vol)
*/
rule "Def, VOL"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  CostoMO < amortizacion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Defensor")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Volante")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Volante!");
		$jugador.setestado("Volante");
		retract($pp1);
end

/** R35
* Si es apto para 2 estadoes (Def, Del)
*/
rule "DEF, Del"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  CostoMO > definicion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Defensor")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Defensor!");
		$jugador.setestado("Defensor");
		retract($pp2);
end

/** R36
* Si es apto para 2 estadoes (Def, Del)
*/
rule "Def, DEL"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  CostoMO < definicion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Defensor")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Delantero!");
		$jugador.setestado("Delantero");
		retract($pp1);
end

/** R37
* Si es apto para 2 estadoes (Vol, Del)
*/
rule "VOL, Del"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  amortizacion > definicion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Volante")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Volante!");
		$jugador.setestado("Volante");
		retract($pp2);
end

/** R38
* Si es apto para 2 estadoes (Vol, Del)
*/
rule "Vol, DEL"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  amortizacion < definicion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Volante")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Delantero!");
		$jugador.setestado("Delantero");
		retract($pp1);
end

/** R39
* Si es apto para 2 estadoes (Vol, Del)
*/
rule "VOL, DEL"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, amortizacion==definicion, capacitacion <= CostoMO);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Volante")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Volante!");
		$jugador.setestado("Volante");
		retract($pp2);
end


/** R40
* Si es apto para 2 estadoes (Vol, Del)
*/
rule "vol, del"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre, amortizacion==definicion, capacitacion > CostoMO);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Volante")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Delantero!");
		$jugador.setestado("Delantero");
		retract($pp1);
end

/** R41
* Si es apto para 2 estadoes (Def, Del)
*/
rule "DEF, DEL"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  CostoMO == definicion, velocidad>capacitacion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Defensor")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Delantero!");
		$jugador.setestado("Delantero");
		retract($pp1);
end

/** R42
* Si es apto para 2 estadoes (Def, Del)
*/
rule "Def, Del"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  CostoMO == definicion, velocidad<=capacitacion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Defensor")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Defensor!");
		$jugador.setestado("Defensor");
		retract($pp2);
end

/** R43
* Si es apto para 2 estadoes (Def, Vol)
*/
rule "DEF, VOL"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  CostoMO == amortizacion, velocidad > capacitacion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Defensor")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Volante")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Volante!");
		$jugador.setestado("Volante");
		retract($pp1);
end

/** R44
* Si es apto para 2 estadoes (Def, Vol)
*/
rule "def, vol"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  CostoMO == amortizacion, velocidad <= capacitacion);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Defensor")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Volante")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Defensor!");
		$jugador.setestado("Defensor");
		retract($pp2);
end

/** R45
* Si es apto para 2 estadoes (Arq, Del)
*/
rule "ARQ, DEL"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  definicion == costo, resistencia >= velocidad);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Delantero!");
		$jugador.setestado("Delantero");
		retract($pp1);
end

/** R46
* Si es apto para 2 estadoes (Arq, Del)
*/
rule "Arq, Del"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  definicion == costo, resistencia < velocidad);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Delantero")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Arquero!");
		$jugador.setestado("Arquero");
		retract($pp2);
end

/** R47
* Si es apto para 2 estadoes (Arq, Vol)
*/
rule "ARQ, VOL"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  amortizacion == costo, resistencia > CostoMO);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Volante")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Arquero!");
		$jugador.setestado("Arquero");
		retract($pp2);
end

/** R48
* Si es apto para 2 estadoes (Arq, Vol)
*/
rule "Arg, Vol"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  amortizacion == costo, resistencia <= CostoMO);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Volante")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Volante!");
		$jugador.setestado("Volante");
		retract($pp1);
end

/** R49
* Si es apto para 2 estadoes (Arq, Def)
*/
rule "ARQ, DEF"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  CostoMO == costo, resistencia > velocidad);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Defensor")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Arquero!");
		$jugador.setestado("Arquero");
		retract($pp2);
end

/** R50
* Si es apto para 2 estadoes (Arq, Def)
*/
rule "Arq, Def"
	salience 32
	no-loop
	when	
		$jugador : Jugador ($idj : id,$nombre : nombre,  CostoMO == costo, resistencia <= velocidad);
		$pp1: estadoPosible ( idJugador ==$idj , estado =="Arquero")
		$pp2: estadoPosible ( idJugador ==$idj , estado =="Defensor")
	then 
		System.out.println($nombre +" tiene 2 posibles -> Como Defensor!");
		$jugador.setestado("Defensor");
		retract($pp1);
end

